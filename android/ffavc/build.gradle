apply plugin: 'com.android.library'

android {
    compileSdkVersion 33
    buildToolsVersion '33.0.2'
    ndkVersion "28.0.13004108"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static"
            }
        }

        ndk {
            if (project.hasProperty("arm64-only")) {
                abiFilters.add("arm64-v8a")
            } else {
                abiFilters.add("armeabi-v7a")
                abiFilters.add("arm64-v8a")
                abiFilters.add("x86_64")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path '../../CMakeLists.txt'
            version = "3.22.1"
        }
    }

    namespace 'org.ffavc'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

project.afterEvaluate {
    mergeReleaseNativeLibs.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/merged_native_libs/release/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/merged_native_libs/release/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/merged_native_libs/release/out/lib/armeabi'
            include '*.so'
        }
    }
    stripReleaseDebugSymbols.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/stripped_native_libs/release/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/stripped_native_libs/release/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/stripped_native_libs/release/out/lib/armeabi'
            include '*.so'
        }
    }
    // 此处为了方便debug，保留debug版本armeabi的拷贝，方便源码接入时候的调试
    mergeDebugNativeLibs.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/merged_native_libs/debug/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/merged_native_libs/debug/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/merged_native_libs/debug/out/lib/armeabi'
            include '*.so'
        }
    }
    stripDebugDebugSymbols.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/out/lib/armeabi'
            include '*.so'
        }
    }
}